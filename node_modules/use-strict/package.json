{
  "name": "use-strict",
  "version": "1.0.0",
  "description": "Makes all modules in Node get loaded in strict mode.",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/use-strict"
  },
  "keywords": [
    "use strict",
    "strict mode"
  ],
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "a7cdf43563a5ac514c96b6f781d9018e0b7a68e8",
  "bugs": {
    "url": "https://github.com/isaacs/use-strict/issues"
  },
  "readme": "# use-strict\n\nMakes all modules in Node get loaded in strict mode.\n\n## Usage\n\n```javascript\nrequire('use-strict')\n// That's it, now everything is strict forever.\n// in other words: FTFY, YOU'RE WELCOME.\n```\n\n## Downside\n\nStrict mode in JavaScript is virtually always a great thing.  It\nprevents accidental global leakage, turns silent mistakes into errors,\nand removes `with` and `arguments.callee` and their sordid\ncomplexities.  It's mostly a Good Thing.\n\nUnfortunately, it also removes octal literals, which is kind of a\nbummer.  You can pass octal strings to Node's functions that deal with\nfile modes, and they'll do the right thing, so it's not completely\nhorrible.\n\nThe implementation works by patching Node's internal `module.wrapper`\narray, and then freezing it, so that further modifications are not\npossible.\n\nThis means that error printouts that occur on the first line of a node\nmodule will be off by a few characters, since Node does a bit of math\nto account for its wrapper script, which will now be off by 13\ncharacters.  This is probably not a big problem, and not really worth\nworking around.\n\nAlso, this means that the *current* module will not be affected.  You\nshould still `\"use strict\"` in the module that does\n`require('use-strict')`.  This module applies strictness to all\n*future* modules loaded by your program.\n\n**Note** You can also run `node --use_strict` and get the same effect\nwithout any of the caveats.\n",
  "homepage": "https://github.com/isaacs/use-strict",
  "_id": "use-strict@1.0.0",
  "dist": {
    "shasum": "a1ff864fe4109428c17bddfedb6eaf309f810047"
  },
  "_from": "use-strict@",
  "_resolved": "https://registry.npmjs.org/use-strict/-/use-strict-1.0.0.tgz"
}
